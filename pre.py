# A = [0.0, -30.66546408087015, -60.68448377773166, -87.38133991137147, -109.03767097741365, -124.38329522078857, -155.08361739618704, -178.04446978261694, -209.2592655015178, -211.28327346638252, -236.57499990191718, -268.8040850180987, -295.5602436512563, -310.05096640954434, -324.9089712276909, -332.0470884389797, -333.2613789433235, -333.3988684106316, -345.7992188413791, -345.85616988055335, -345.94984065804283, -355.47831004008594, -355.5358540485099, -397.3568628616117, -402.5687898407991, -407.98484408882314, -408.33328983975616, -413.03116408699816, -415.7838962684759, -416.86318989321944, -418.1285885946122, -418.7621551012412, -455.18708411285434, -455.3243328209669, -455.751773338975, -455.9743381843655, -457.9065613402772, -459.33037892166703, -459.3905137248478, -459.6695542837858, -459.74463791893527, -463.5379048488578, -463.7430520226451, -463.86624802678944, -466.19494388398743, -466.3430744994296, -466.40636634862994, -466.49316678275795, -466.6848435186963, -474.640299482851, -474.74089895020063, -474.86295098504183, -474.94653456259914, -474.953438225421, -475.05500779631495, -476.65693230463205, -476.6921632487928, -477.0154138315694, -477.0402408953244, -477.5719204085413, -477.57773022799944, -477.6755721569887, -477.698371629264, -478.2061262599701, -478.20884988802186, -480.60554150213693, -480.93046443177104, -482.30407310361556, -482.3823965649269, -482.89135171571036, -482.90163745338907, -483.1701853897948, -510.99660778972435, -511.0113090877198, -515.1547152460366, -515.248592527553, -515.4059533870657, -515.4667295407562, -515.5152473979045, -516.186636498529, -516.5606590485438, -517.7693006439847, -517.7713165045823, -518.5093970310655, -518.7557817319685, -518.7599814892925, -518.7725494313917, -518.7775410197551, -518.7830360604933, -518.7892740696574, -518.8607593692428, -518.9806017037783, -518.9848153281354, -522.1247261501206, -522.1317028993935, -522.1359259879091, -522.1456098266699, -522.1648094294144, -526.5013980312546, -526.504269620093, -526.7125268519625, -526.8085850332284, -526.822118012491, -526.8363854864223, -527.1493915616287, -527.2141383842693, -527.2760065070532, -528.0779795040411, -528.0916601302691, -528.1806487994616, -528.1862581066573, -528.1916809984202, -528.2247391208821, -528.2287893586752, -528.3047769268984, -528.3067286606864, -528.3177989077885, -528.3634565694402, -528.3662214504851, -528.3765310729585, -528.3871939246777, -528.3894248850146, -528.3983995489068, -528.5111212944274, -528.5167256147316, -528.5181562761348, -528.5235190147517, -528.5243037767406, -528.524961545792, -528.5277971955899, -528.5312766853597, -528.5331073824652, -528.5401019236876, -528.5661495661727, -528.5711568790668, -528.5729332791735, -528.6104852999728, -528.613107405656, -528.6212526386545, -528.6246675747997, -528.6736466132968, -528.6856883872626, -528.7619497441182, -528.7906162272395, -528.7929120752754, -528.7938757582493, -528.9639660555575, -528.9978055798512, -528.9994593141046, -529.0594099828841, -529.0682424803717, -529.0784361727399, -529.0789747036517, -529.1396284855607, -529.1428658086571, -529.1967694195718, -529.1990087460255, -529.2215598650039, -529.2226908230008, -529.286933836933, -529.2878167631109, -529.2954147106034, -529.2966789572687, -529.2971789191498, -529.3569054475953, -529.3573471539304, -529.3580117367765, -529.3581302773493, -529.3583566747072, -529.3595544152547, -529.3602071890411, -529.3610489068576, -529.3645072297121, -529.3674991065897, -529.3703367884452, -529.373572834267, -529.4010891807462, -529.4019619671911, -529.4034342220264, -529.404213901265, -529.4047637678365, -529.4048883038341, -529.4058401870645, -529.4059864262194, -529.4095186369058, -529.4103634817336, -529.41144380359, -529.4127879277261, -529.4204174660606, -529.4214948355044, -529.4237453812322, -529.4238982650833, -529.4293922599846, -529.4294948017294, -529.4306848395039, -529.4323438438767, -529.4370724900551, -529.4383707024542, -529.4384348022654, -529.4404551691415, -529.4562002263332, -529.4562858167616, -529.4608139921642, -529.4649071006386, -529.4650697007422, -529.4739927761152, -529.4741066758497, -529.474205003393, -529.4805039003638, -529.4806855569142, -529.4808171698647, -529.480933742083, -529.482360249057, -529.4858451968495, -529.4879048475336, -529.4880055774503, -529.4922056347121, -529.4926471872711, -529.4927044992323, -529.493315149987, -529.5157300284502, -529.5170270285515, -529.5173505080288, -529.5234666187843, -529.5240045513585, -529.5242814651082, -529.5394049482625, -529.5397419378357, -529.5400834109611, -529.5433843758482, -529.5511736111638, -529.5515728971211, -529.5519123873726, -529.5524856188456, -529.5560376815417, -529.556844080769, -529.5570595176696, -529.5572277400523, -529.5600689594818, -529.56088151201, -529.5628066710123, -529.5628852008398, -529.5632559125911, -529.9693072066952, -529.9712078063965, -529.9720079393982, -529.9758754517104, -529.9764766602708, -530.0212708476537, -530.0215213037711, -530.0217095985014, -530.0238185196127, -530.0335882121246, -530.0435932729101, -530.0438568283528, -530.0550825603277, -530.0553662972133, -530.0559067952465, -530.0562077156928, -530.0565575905596, -530.0605974221131, -530.0606467630054, -530.0691202450478, -530.0693579827472, -530.069615869479, -530.0706573062726, -530.0709370580562, -530.0725808200511, -530.0726260153924, -530.0737907335665, -530.0738874441959, -530.0740049972416, -530.0743847083901, -530.0751851945315, -530.0826470203637, -530.0829632035242, -530.0872185797539, -530.0872995926375, -530.0883929578547, -530.0886138084722, -530.0888333087705, -530.0891906285234, -530.0893703618123, -530.089654835363, -530.089688361728, -530.0898047399538, -530.0914878047776, -530.0915548883072, -530.0916182358034]

# def sliding_window_max_min(nums, n):
#     if len(nums) < n:
#         return "列表长度小于窗口大小"

#     start = 0
#     end = n - 1
#     deltas = []  # 存储每个窗口的 d 值

#     while end < len(nums):
#         window = nums[start:end+1]
#         max_value = max(window)
#         min_value = min(window)
#         d = (min_value - max_value) / min_value
#         deltas.append(d)  # 存储当前窗口的 d 值
#         print(f"窗口 [{start}, {end}] 最大值: {max_value}, 最小值: {min_value}, dealta: {d}")
#         start += 1
#         end += 1

#     return deltas
# window_size = 8
# deltas = sliding_window_max_min(A, window_size)

# # 计算每个范围内的最小 d 值及其索引
# min_d_1_50 = min(deltas[:50])
# min_d_51_100 = min(deltas[50:100])

# index_min_d_1_50 = deltas.index(min_d_1_50)
# index_min_d_51_100 = deltas.index(min_d_51_100, 50)

# print(f"第1-50个窗口的最小 d 值为 {min_d_1_50}，在第 {index_min_d_1_50} 个窗口")
# print(f"第51-100个窗口的最小 d 值为 {min_d_51_100}，在第 {index_min_d_51_100} 个窗口")
a=0.0004141
if a <= 0.003:
    print("1")